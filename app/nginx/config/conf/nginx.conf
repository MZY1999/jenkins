user     www      www;

worker_processes auto;
worker_cpu_affinity auto;

error_log /data/logs/nginx/nginx_error.log;
pid /usr/local/nginx/nginx.pid;

#worker进程打开最大文件数 可CPU*10000设置 酌情调整
worker_rlimit_nofile 51200;

events {
                #worker进程同时打开的最大连接数，可CPU*2048设置
                worker_connections 10240;

                #告诉nginx收到一个新链接通知后接受尽可能多的链接
                multi_accept on;

                #设置用于复用客户端线程的轮询方法
                use epoll;
  }

#Nginx tcp load balance
include tcp_vhosts/*.conf;

http {
                #打开或关闭错误页面中的nginx版本号
                server_tokens on;

                include       mime.types;
                default_type  application/octet-stream;
                server_names_hash_bucket_size 128;
                proxy_headers_hash_max_size 51200;
                proxy_headers_hash_bucket_size 6400;

                #缓冲区代理缓冲用户端请求的最大字节数
                client_header_buffer_size 32k;

                large_client_header_buffers 4 32k;

                #允许客户端请求的最大单文件字节数
                client_max_body_size 10M;

                #优化磁盘IO设置 指定nginx是否调用sendfile函数来输出文件 普通应用设为on 下载等磁盘IO高的应用 可设为off
                sendfile on;

                #设置nginx在一个数据包里发送所有头文件 而不是一个接一个的发送
                tcp_nopush     on;

                #客户端分配keep-alive链接超时时间
                keepalive_timeout 65;

                #设置nginx不要缓存数据 而是一段一段的发送 当需要及时发送数据时 就应该给应用设置这个属性 这样发送一小块数据信息时就不能立即得到返回值
                tcp_nodelay on;

                #设置默认字符集
                charset UTF-8;

                fastcgi_connect_timeout 300;
                fastcgi_send_timeout 300;
                fastcgi_read_timeout 300;
                fastcgi_buffer_size 64k;
                fastcgi_buffers 4 64k;
                fastcgi_busy_buffers_size 128k;
                fastcgi_temp_file_write_size 256k;
                fastcgi_intercept_errors on;

                client_body_buffer_size 256k;
                send_timeout 3m;
                client_header_timeout 3m;
                client_body_timeout 3m;
                proxy_ignore_client_abort on;

                #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
                proxy_redirect off;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


                #nginx跟后端服务器连接超时时间(代理连接超时)
                proxy_connect_timeout 60;

                #连接成功后，后端服务器响应时间(代理接收超时)
                proxy_read_timeout 120;

                #后端服务器数据回传时间(代理发送超时)
                proxy_send_timeout 20;

                #设置代理服务器 保存用户头信息的缓冲区大小
                proxy_buffer_size 32k;

                #proxy_buffers缓冲区 网页平均在32k以下的设置
                proxy_buffers 4 128k;

                #高负荷下缓冲大小proxy_buffers*2
                proxy_busy_buffers_size 256k;

                #设置nginx采用gzip压缩的形式发送数据 减少发送数据量 但会增加请求处理时间及CPU处理时间 需要权衡
                gzip on;
                gzip_min_length  1k;
                gzip_buffers     4 16k;
                gzip_http_version 1.0;

                #设置数据压缩等级 1-9之间 9最慢压缩比最大
                gzip_comp_level 2;

                #设置需要压缩的数据格式
                gzip_types  text/plain application/x-javascript text/css application/xml;

                #加vary给代理服务器使用 针对有的浏览器支持压缩 有的不支持 根据客户端的HTTP头来判断是否需要压缩
                gzip_vary on;

                include http_vhosts/*.conf;
                #定义日志格式
                log_format main '[$time_local] $remote_addr $http_x_forwarded_for $remote_user $request_method "$request_uri" '
                '$status $body_bytes_sent '
                '$upstream_response_time $upstream_status $upstream_addr "$http_referer" "$http_user_agent" $request_time $host';
                access_log /data/logs/nginx/access.log main;
}
